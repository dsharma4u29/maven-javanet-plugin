<?xml version="1.0"?>
<project xmlns:j="jelly:core" 
         xmlns:util="jelly:util"
         xmlns:maven="jelly:maven"
         xmlns:define="jelly:define"
         xmlns:javanet="javanet">

  <!-- =============================
       JELLY TAGS
       ============================= -->
  <define:taglib uri="javanet">
  
    <!--
      Deploy an artifact to project's java.net CVS repository.
      
      'failonerror' - Fail on error (defaults true)
    -->
    <define:tag name="deploy">
      <attainGoal name="javanet:check"/>      
      <j:set var="failonerror" value="${failonerror}" defaultValue="true"/>
      
      <!-- 
           VERY IMPORTANT to delete (poss CVS-working) directory if exists, or
           conflicts arise when commiting java.net.updater.
      -->
      <j:set var="tempdir" value="${maven.build.dir}/repo"/>
      <delete dir="${tempdir}"/>
      
      <!-- 
        Run the body. This should be 'artifact' tags, each of which will
        copy appropriately below the temp dir 
      -->
      <define:invokeBody/>      
      
      <!-- import the artifact(s). This should be done with common code for the
           site deploy I guess...
      -->
      <echo message="CVSROOT is: ${maven.javanet.cvsroot}"/>
      
      <tstamp/>    
      <cvs dest="${tempdir}" failonerror="${failonerror}">
        <commandline>
          <argument value="-d${maven.javanet.cvsroot}"/>
          <argument value="-z9"/>
          <argument line="import -ko"/>
          <argument value="-W"/>
          <argument line="*.jar -k 'b'"/>
          <argument value="-W"/>
          <argument line="*.war -k 'b'"/>
          <argument value="-W"/>
          <argument line="*.zip -k 'b'"/>
          <argument value="-W"/>
          <argument line="*.tar.gz -k 'b'"/>
          <argument value="-m"/>
          <argument value="Repository deployment"/>
          
          <argument value="${maven.javanet.project}/repo"/>
          <argument line="repo-deployment t${DSTAMP}${TSTAMP}" />
        </commandline>
      </cvs>
      
      <!-- TODO set 'failonerror' false and just check out & touch the .java.net.updater file? -->
      <echo message="Tempdir is ${tempdir}"/>
      <delete dir="${tempdir}"/>
      
      <javanet:run-updater />
    </define:tag>

    <!--
      Represents a single artifact inside a javanet:deploy tag. Works by copying
      each artifact to the ${tempdir} as it's encountered.
      
      'path'    - Path to the artifact (REQUIRED)
      'type'    - Artifact type (jar, war, plugin, distribution. Default: based on file ext)
      'withPom' - Copy POM? (defaults: true)      
      
      TODO I think we may need to support 'license' artifacts too?     
    -->
    <define:tag name="artifact">
      <echo message="Processing artifact '${path}'"/>
      
      <j:if test="${tempdir == null}">
        <fail message="javanet:artifact tag(s) must be contained within javanet:deploy"/>
      </j:if>
      <j:if test="${path == null}">
        <fail message="You must specify the 'path' attribute to javanet:artifact"/>
      </j:if>
      <j:set var="withPom" value="${withPom}" defaultValue="true"/>
      
      <!-- auto-discover type from ext if not set. Plugins can't be auto'd (yet) -->
      <j:if test="${type == null}">
        <j:choose>
          <j:when test="${path.endsWith('.pom')}">
            <j:set var="type" value="pom"/>
          </j:when>
          <j:when test="${path.endsWith('.jar')}">
            <j:set var="type" value="jar"/>
          </j:when>
          <j:when test="${path.endsWith('.war')}">
            <j:set var="type" value="war"/>
          </j:when>
          <j:when test="${path.endsWith('.zip') || path.endsWith('.tar.gz')}">
            <j:set var="type" value="distribution"/>
          </j:when>
          <j:otherwise>
            <fail message="Artifact '${path}' is not compatible with the repository"/>
          </j:otherwise>
        </j:choose>
      </j:if>    
      
      <j:set var="repoPath" value="${tempdir}/${type}s"/>

      <echo message="Type is '${type}'"/>
      <echo message="Path is '${repoPath}'"/>
      
      <mkdir dir="${repoPath}"/>
      
      <!-- COPY ARTIFACT -->
      <copy todir="${repoPath}" file="${path}"/>      
      <util:file var="artf" name="${path}"/>
      <checksum file="${repoPath}/${artf.name}" algorithm="MD5" fileext=".md5"/>
      <checksum file="${repoPath}/${artf.name}" algorithm="SHA" fileext=".sha1"/>
      
      <!-- COPY POM -->
      <j:if test="${withPom}">
        <j:set var="pomPath" value="${tempdir}/poms"/>
        <mkdir dir="${pomPath}"/>
        <copy tofile="${pomPath}/${maven.final.name}.pom" file="${pom.file.absolutePath}"/> 
        <checksum todir="${pomPath}" file="${pomPath}/${maven.final.name}.pom" algorithm="MD5" fileext=".md5"/>
        <checksum todir="${pomPath}" file="${pomPath}/${maven.final.name}.pom" algorithm="SHA" fileext=".sha1"/>      
      </j:if>      
    </define:tag>
    
    
    <define:tag name="run-updater">
      <!--
        java.net web page updater doesn't react to the import command,
        so we need to commit another file to trigger the updater.
        
        check out www into target/javanet-www
      -->
      <delete dir="${maven.build.dir}/javanet-www" />
      <cvs dest="${maven.build.dir}" failonerror="true">
        <commandline>
          <argument value="-d${maven.javanet.cvsroot}"/>
          <argument line="-z9 checkout -d javanet-www -l ${maven.javanet.project}/www"/>
        </commandline>
      </cvs>
      
      <echo file="${maven.build.dir}/javanet-www/.java.net.updater">${DSTAMP}${TSTAMP}</echo>
      
      <!-- add (in case this file isn't already in place), then commit -->
      <cvs dest="${maven.build.dir}/javanet-www" failonerror="false">
        <commandline>
          <argument line="add .java.net.updater"/>
        </commandline>
      </cvs>
      <cvs dest="${maven.build.dir}/javanet-www" failonerror="true">
        <commandline>
          <argument value="commit"/>
          <argument value="-m"/>
          <argument value="working around a bug in the java.net cvs updater"/>
          <argument value=".java.net.updater"/>
        </commandline>
      </cvs>
      
      <!-- It confuses Eclipse having a working dir from one root inside a working dir from another,
           esp when the second is inside a .cvsignored directory in the first... -->
      <delete dir="${maven.build.dir}/javanet-www" />
      
    </define:tag>
  </define:taglib>
  
  <!-- =============================
       PLUG-IN GOALS
       ============================= -->
  <!-- 
      makes sure that the relevant properties are set and inits some 
      jelly context vars.
  -->
  <goal name="javanet:check">
    <j:if test="${context.getVariable('maven.javanet.project')==null}">
      <fail>Set "maven.javanet.project" to the project name on java.net</fail>
    </j:if>
  </goal>
  
  <goal name="javanet:-taskdef">
    <taskdef resource="org/kohsuke/javanettasks.properties">
      <classpath>
        <fileset dir="${plugin.resources}/lib" includes="**/*.jar"/>
        <pathelement path="${plugin.getDependencyPath('httpunit')}"/>
        <pathelement path="${plugin.getDependencyPath('xml-apis')}"/>
        <pathelement path="${plugin.getDependencyPath('xerces')}"/>
        <pathelement path="${plugin.getDependencyPath('jtidy')}"/>
        <pathelement path="${plugin.getDependencyPath('nekohtml')}"/>
        <pathelement path="${plugin.getDependencyPath('dom4j')}"/>
        <pathelement path="${plugin.getDependencyPath('jaxen')}"/>
      </classpath>
    </taskdef>
  </goal>

  <goal name="javanet:dist"
        prereqs="javanet:check,javanet:-taskdef"
        description="Post distribution zip/tar.gz to java.net">
    
    <attainGoal name="dist:build" />
    
    <echo>Uploading files to ${maven.javanet.release.folder}</echo>
    
    <javaNetUpload projectName="${maven.javanet.project}"
      toFile="${maven.javanet.release.folder}/${maven.final.name}.zip"
      fromFile="${maven.dist.dir}/${maven.final.name}.zip"
      overwrite="yes"
      fileStatus="stable"
    />
    
    <javaNetUpload projectName="${maven.javanet.project}"
      toFile="${maven.javanet.release.folder}/${maven.final.name}.tar.gz"
      fromFile="${maven.dist.dir}/${maven.final.name}.tar.gz"
      overwrite="yes"
      fileStatus="stable"
    />
    
    <javaNetUpload projectName="${maven.javanet.project}"
      toFile="${maven.javanet.release.folder}/${maven.final.name}-src.zip"
      fromFile="${maven.dist.dir}/${maven.final.name}-src.zip"
      overwrite="yes"
      fileStatus="stable"
    />
    
    <javaNetUpload projectName="${maven.javanet.project}"
      toFile="${maven.javanet.release.folder}/${maven.final.name}-src.tar.gz"
      fromFile="${maven.dist.dir}/${maven.final.name}-src.tar.gz"
      overwrite="yes"
      fileStatus="stable"
    />
    
  </goal>
  
  
  <goal name="javanet:site"
        prereqs="javanet:check"
        description="Post the generated website to java.net">
    <attainGoal name="site:generate" />
    <tstamp/>
    
    <!-- import the generated site -->
    <cvs dest="${maven.docs.dest}" failonerror="true">
      <commandline>
        <argument value="-d${maven.javanet.cvsroot}"/>
        <argument line="-z9 import -ko"/>
        <argument value="-W"/>
        <argument value="*.png -k 'b'"/>
        <argument value="-W"/>
        <argument value="*.gif -k 'b'"/>
        <argument value="-m"/>
        <argument value="deploying the new web contents"/>
        
        <argument value="${maven.javanet.docroot.full}"/>
        <argument line="site-deployment t${DSTAMP}${TSTAMP}" />
      </commandline>
    </cvs>
    
    <javanet:run-updater />
  </goal>
  
  
  <!-- 1.1 -->
  <goal name="javanet:deploy-jar"
        prereqs="javanet:check,jar:jar"
        description="Deploy the Jar to the Java.net repository">
    <javanet:deploy>
      <javanet:artifact path="${maven.build.dir}/${maven.final.name}.jar"/>
    </javanet:deploy>
  </goal>
  
  <goal name="javanet:deploy-war"
        prereqs="javanet:check,war:war"
        description="Deploy the Jar to the Java.net repository">
    <javanet:deploy>
      <javanet:artifact path="${maven.build.dir}/${maven.final.name}.war"/>
    </javanet:deploy>
  </goal>
  
  <goal name="javanet:deploy-plugin"
        prereqs="javanet:check,jar:jar"
        description="Deploy the Jar to the Java.net repository">
    <javanet:deploy>
      <javanet:artifact path="${maven.build.dir}/${maven.final.name}.jar" type="plugin"/>
    </javanet:deploy>
  </goal>
  
  <goal name="javanet:deploy-dist"
        prereqs="javanet:check,dist"
        description="Deploy the Jar to the Java.net repository">
    <javanet:deploy>
      <javanet:artifact path="${maven.build.dir}/distributions/${maven.final.name}.zip"/>
      <javanet:artifact path="${maven.build.dir}/distributions/${maven.final.name}.tar.gz" withpom="false"/>
      <javanet:artifact path="${maven.build.dir}/distributions/${maven.final.name}-src.zip" withpom="false"/>
      <javanet:artifact path="${maven.build.dir}/distributions/${maven.final.name}-src.tar.gz" withpom="false"/>
    </javanet:deploy>
  </goal>
  <!-- == -->
  
  <goal name="javanet:register-repository"
        prereqs="javanet:-taskdef"
        description="Register your project to the Java.net repository">
    <echo>Adding 'maven_repository' user to the ${maven.javanet.project} project...</echo>
    <javaNetAddMember projectName="${maven.javanet.project}"
      role="Observer"
      user="maven_repository"
    />
  </goal>
  
</project>